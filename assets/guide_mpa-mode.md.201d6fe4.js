import{_ as n,B as o,o as p,c as l,x as a,a as s,D as t,N as c}from"./chunks/framework.212bf628.js";const h=JSON.parse('{"title":"MPA Mode","description":"","frontmatter":{},"headers":[],"relativePath":"guide/mpa-mode.md","lastUpdated":1681204905000}'),r={name:"guide/mpa-mode.md"},d={id:"mpa-mode",tabindex:"-1"},i=a("a",{class:"header-anchor",href:"#mpa-mode","aria-label":'Permalink to "MPA Mode <Badge type="warning" text="实验" />"'},"​",-1),D=c(`<p>MPA (多页面应用程序)模式可以通过在命令行中使用<code>vitepress build --mpa</code>开启，或配置<code>mpa: true</code>选项。</p><p>在MPA模式中，默认情况下所有页面都不包含JavaScript。因此，生产站点可以从评分工具中获取更高的初始访问性能评分。</p><p>然而，由于缺乏SPA导航，跨页面链接将导致整个页面的重新加载。所以，MPA模式下的加载后导航不会像SPA模式下那么极速。</p><p>当然，要知道没有JS就意味着你只是纯粹使用Vue作为服务端模板语言，这将导致浏览器中没有任何事件处理程序，也就不会有任何交互性。为了可以加载客户端js，你可以使用特殊的<code>&lt;script client&gt;</code>标签（只能在MPA模式中使用，可用在<code>.md</code> 和 <code>.vue</code>文件里）：</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">client</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">querySelector</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">h1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">click</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">client side JavaScript!</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;"># Hello</span></span>
<span class="line"></span></code></pre></div><p>在所有的主题组件中客户端脚本将会被打包到一起，而特定页面的客户端脚本将会针对这个页面进行分割。</p><p>注意<code>&lt;script client&gt;</code>将<strong>不作为Vue代码进行评估</strong>:它被作为一个简单的JavaScript模块处理。因此，只有当站点对客户端交互的要求非常低时，才应该使用MPA模式。</p>`,7);function F(y,A,_,C,m,g){const e=o("Badge");return p(),l("div",null,[a("h1",d,[s("MPA Mode "),t(e,{type:"warning",text:"实验"}),s(),i]),D])}const P=n(r,[["render",F]]);export{h as __pageData,P as default};
