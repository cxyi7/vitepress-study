import{_ as s,o as a,c as e,N as n}from"./chunks/framework.212bf628.js";const u=JSON.parse('{"title":"资源处理","description":"","frontmatter":{},"headers":[],"relativePath":"guide/asset-handling.md","lastUpdated":1679973431000}'),o={name:"guide/asset-handling.md"},l=n(`<h1 id="资源处理" tabindex="-1">资源处理 <a class="header-anchor" href="#资源处理" aria-label="Permalink to &quot;资源处理&quot;">​</a></h1><p>所有的Markdown文件都会编译成Vue组件，再由<a href="https://vitejs.dev/guide/assets.html" target="_blank" rel="noreferrer">Vite</a>进行加工处理。所使用到的任何资源都可以（尽量）使用相对URL：</p><div class="language-md"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">![</span><span style="color:#C3E88D;">An image</span><span style="color:#89DDFF;">](</span><span style="color:#A6ACCD;text-decoration:underline;">./image.png</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span></code></pre></div><p>你可以在markdown文件中引用静态资源，你主题中的<code>*.vue</code>组件、样式、还有纯粹的<code>.css</code>文件可以使用绝对公共路径（基于根目录），也可以使用相对路径（基于你的文件结构）。使用相对路径就和你在Vite、Vue CLI或者webpack的 <code>file-loader</code>中使用方法的一样。</p><p>常见的照片、视频和字体文件会被自动检测并作为资源包含在其中。</p><p>所有引用的资源，包含那些使用绝对路径的，在生产打包时将被复制到dist文件夹中，并带有一个哈希文件名。从未引用的资源将不会被复制。图片资源小于4KB的将以base64的形式内联，当然这个是可以在<a href="/vitepress-study/reference/site-config#vite"><code>vite</code></a>配置选项进行配置的。</p><p>所有 <strong>静态</strong> 路径引用，包含那些绝对路径，都应该是基于你的工作目录结构。</p><h2 id="公共文件" tabindex="-1">公共文件 <a class="header-anchor" href="#公共文件" aria-label="Permalink to &quot;公共文件&quot;">​</a></h2><p>有时候你得提供没有在Markdown文件或者主题组件中被直接引用的静态资源（比如favicons 和 PWA icons）。根目录（如果你运行了<code>vitepress build docs</code>就会有<code>docs</code>文件夹）下的<code>public</code>目录可以存放无论是从未被代码文件中引用过的（比如<code>robots.txt</code>）或是必须确切的含有相同名字的文件（没有被哈希过的）的静态资源。</p><p>放在<code>public</code>目录下的资源将原样复制到根目录下的dist目录。</p><p>请注意，你应该使用根绝对路径来引用放在<code>public</code>下的文件。比如，<code>public/icon.png</code> 就应该使用<code>/icon.png</code>这样的方式在代码文件中引用。</p><p>这么写可能会有一个异常：如果你在<code>public</code>下有一个HTML页面并且在主站点里链接了它，默认下路由会报404。为了解决这个问题，VitePress提供了一个<code>pathname://</code>协议允许你在同域名下链接到其他页面（即使链接是外部的）。对比下面两个链接：</p><ul><li><a href="/vitepress-study/pure.html">/pure.html</a></li><li><a href="/pure.html" target="_blank" rel="noreferrer">pathname:///pure.html</a></li></ul><h2 id="base-url" tabindex="-1">Base URL <a class="header-anchor" href="#base-url" aria-label="Permalink to &quot;Base URL&quot;">​</a></h2><p>如果你的站点部署在非根URL上，你需要在<code>.vitepress/config.js</code>中设置<code>base</code>选项。比如，你计划部署站点到<code>https://foo.github.io/bar/</code>上，那么<code>base</code>选项就应该是<code>&#39;/bar/&#39;</code>（注意斜杠前后都应该有）。</p><p>你所有的静态资源路径都会自动的<code>base</code>配置的值进行调整处理。比如，在你的markdown中使用绝对路径引用了<code>public</code>下的一个资源：</p><div class="language-md"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">![</span><span style="color:#C3E88D;">An image</span><span style="color:#89DDFF;">](</span><span style="color:#A6ACCD;text-decoration:underline;">/image-inside-public.png</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span></code></pre></div><p>当你修改了<code>base</code>配置项的值后，你也不需要去更新它（上面这个）。</p><p>然而，如果你正在编写一个动态链接资源的主题组件，比如，一个照片的<code>src</code>是基于主题配置选项值：</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">img</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">theme</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">logoPath</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">/&gt;</span></span>
<span class="line"></span></code></pre></div><p>这种情况下建议使用VitePress提供的<a href="/vitepress-study/reference/runtime-api#withbase"><code>withBase</code> helper</a>去包装一下路径：</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">setup</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">withBase</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">useData</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">vitepress</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> theme </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useData</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">img</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">:src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">withBase(theme.logoPath)</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div>`,22),p=[l];function t(c,r,i,d,D,y){return a(),e("div",null,p)}const h=s(o,[["render",t]]);export{u as __pageData,h as default};
